<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <title>Three.js File Previewer</title>
  <style>html,body{margin:0;height:100%;overflow:hidden}</style>
</head>
<body>
  <!-- File picker -->
  <input id="fileInput" type="file"
         accept=".obj,.gltf,.glb"
         style="position:absolute;z-index:2;left:1rem;top:1rem"/>

  <!-- Render surface -->
  <canvas id="viewer"></canvas>

  <!-- Dependencies →
  <script type="module">
    import * as THREE from 'https://unpkg.com/three@0.161.0/build/three.module.js';
    import { OrbitControls } from 'https://unpkg.com/three@0.161.0/examples/jsm/controls/OrbitControls.js';
    import { OBJLoader }  from 'https://unpkg.com/three@0.161.0/examples/jsm/loaders/OBJLoader.js';
    import { GLTFLoader } from 'https://unpkg.com/three@0.161.0/examples/jsm/loaders/GLTFLoader.js';

    // ---------- core objects ----------
    const canvas   = document.getElementById('viewer');
    const renderer = new THREE.WebGLRenderer({canvas, antialias:true});
    renderer.setPixelRatio(window.devicePixelRatio);
    const scene    = new THREE.Scene();
    scene.background = new THREE.Color(0x222831);

    const camera   = new THREE.PerspectiveCamera(
        45, canvas.clientWidth / canvas.clientHeight, 0.1, 1000 );
    camera.position.set(0, 1.2, 3);

    // lights – OBJ defaults to Phong/Standard so you need lighting
    const hemi = new THREE.HemisphereLight(0xffffff, 0x444444, 0.8);
    scene.add(hemi);
    const dir  = new THREE.DirectionalLight(0xffffff, 1.0);
    dir.position.set(5, 10, 7);
    scene.add(dir);

    // orbit / pan / zoom controls
    const controls = new OrbitControls(camera, canvas);
    controls.enableDamping = true;           // inertia
    controls.dampingFactor = 0.1;
    controls.screenSpacePanning = false;     // keep pan in ground plane
    controls.minDistance = 0.5;              // zoom limits
    controls.maxDistance = 20;
    controls.target.set(0,0,0);
    controls.update();

    // resize handler
    function onWindowResize(){
      const {clientWidth:w, clientHeight:h} = canvas;
      camera.aspect = w/h;
      camera.updateProjectionMatrix();
      renderer.setSize(w,h,false);
    }
    window.addEventListener('resize', onWindowResize);
    onWindowResize();

    // animation loop
    function animate(time){
      controls.update();        // damping needs update
      renderer.render(scene,camera);
      requestAnimationFrame(animate);
    }
    requestAnimationFrame(animate);
